{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"itscalledsoccer","text":""},{"location":"#background","title":"Background","text":"<p><code>itscalledsoccer</code> is a wrapper around the same API that powers the American Soccer Analysis app. It enables Python users to programmatically retrieve advanced analytics for their favorite MLS, NWSL, and USL players and teams.</p>"},{"location":"#install","title":"Install","text":"<pre><code>pip install itscalledsoccer\n</code></pre> <p>To install a development version, clone this repo and run the following command.</p> <pre><code>pip install --editable .\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from itscalledsoccer.client import AmericanSoccerAnalysis\n\nasa_client = AmericanSoccerAnalysis()\n</code></pre> <p>Any of the <code>get_*</code> methods can be used to retrieve the same data made available in the American Soccer Analysis app. Partial matches or abbreviations are accepted for any player or team names. For most methods, arguments must be named. A few examples are below.</p> <pre><code># Get all players named \"Andre\"\nasa_players = asa_client.get_players(names=\"Andre\")\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Feel free to open an issue or submit a pull request.</p>"},{"location":"#license","title":"License","text":"<p>MIT \u00a9 itscalledsoccer authors</p>"},{"location":"reference/","title":"Reference","text":"<p>Wrapper around the ASA Shiny API</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>class AmericanSoccerAnalysis:\n    \"\"\"Wrapper around the ASA Shiny API\"\"\"\n\n    API_VERSION = \"v1\"\n    BASE_URL = f\"https://app.americansocceranalysis.com/api/{API_VERSION}/\"\n    LEAGUES = [\"nwsl\", \"mls\", \"uslc\", \"usl1\", \"usls\", \"nasl\", \"mlsnp\"]\n    MAX_API_LIMIT = 1000\n    LOGGER = getLogger(__name__)\n\n    def __init__(\n        self,\n        proxies: Optional[dict] = None,\n        logging_level: Optional[str] = \"WARNING\",\n        lazy_load: Optional[bool] = True,\n    ) -&gt; None:\n        \"\"\"Class constructor\n\n        Args:\n            proxies (Optional[dict], optional): A dictionary containing proxy mappings, see https://docs.python-requests.org/en/latest/user/advanced/#proxies. Defaults to None.\n            logging_level (Optional[str], optional): A string representing the logging level of the logger. Defaults to \"WARNING\".\n            lazy_load (Optional[bool], optional): A boolean indicating whether to lazy load all entity data on initialization. Defaults to True.\n        \"\"\"\n        SESSION = requests.session()\n        if proxies:\n            SESSION.proxies.update(proxies)\n        CACHE_SESSION = CacheControl(SESSION, heuristic=ExpiresAfter(days=1))\n\n        if logging_level:\n            if logging_level.upper() in [\n                \"DEBUG\",\n                \"INFO\",\n                \"WARNING\",\n                \"ERROR\",\n                \"CRITICAL\",\n            ]:\n                self.LOGGER.setLevel(getLevelName(logging_level.upper()))\n            else:\n                self.LOGGER.info(f\"Logging level {logging_level} not recognized!\")\n\n        self.session = CACHE_SESSION\n        self.base_url = self.BASE_URL\n        self.lazy_load = lazy_load\n\n        self.players: DataFrame = None\n        self.teams: DataFrame = None\n        self.stadia: DataFrame = None\n        self.managers: DataFrame = None\n        self.referees: DataFrame = None\n\n        if self.lazy_load:\n            self.LOGGER.info(\n                \"Lazy loading enabled. Initializing client without entity data.\"\n            )\n        else:\n            self.LOGGER.info(\n                \"Lazy loading disabled. Initializing client with entity data.\"\n            )\n            self.players = self._get_entity(\"player\")\n            self.teams = self._get_entity(\"team\")\n            self.stadia = self._get_entity(\"stadia\")\n            self.managers = self._get_entity(\"manager\")\n            self.referees = self._get_entity(\"referee\")\n        self.LOGGER.info(\"Finished initializing client\")\n\n    def _get_entity(self, type: str) -&gt; DataFrame:\n        \"\"\"Gets all the data for a specific type and\n        stores it in a DataFrame.\n\n        Args:\n            type (str): type of data to get\n\n        Returns:\n            DataFrame: _description_\n        \"\"\"\n        plural_type = f\"{type}s\" if type != \"stadia\" else f\"{type}\"\n        self.LOGGER.info(f\"Gathering all {plural_type}\")\n        df = DataFrame([])\n        for league in self.LEAGUES:\n            url = f\"{self.BASE_URL}{league}/{plural_type}\"\n            resp_df = self._execute_query(url, {})\n            resp_df = resp_df.assign(competition=league)\n            df = concat([df, resp_df], ignore_index=True)\n        return df\n\n    def _convert_name_to_id(self, type: str, name: str) -&gt; str:\n        \"\"\"Converts the name of a player, manager, stadium, referee or team\n        to their corresponding id.\n\n        Args:\n            type (str): type of name to convert\n            name (str): name\n\n        Returns:\n          str: the matched id\n        \"\"\"\n        min_score = 70\n\n        if type == \"player\":\n            lookup = self.players\n            names = self.players[\"player_name\"].to_list()\n        elif type == \"manager\":\n            lookup = self.managers\n            names = self.managers[\"manager_name\"].to_list()\n        elif type == \"stadium\":\n            lookup = self.stadia\n            names = self.stadia[\"stadium_name\"].to_list()\n        elif type == \"referee\":\n            lookup = self.referees\n            names = self.referees[\"referee_name\"].to_list()\n        elif type == \"team\":\n            lookup = self.teams\n            names = self.teams[\"team_name\"].to_list()\n\n        # Getting back nan from the API for some names\n        names = [n for n in names if isnull(n) is False]\n\n        matches = process.extractOne(name, names, scorer=fuzz.partial_ratio)\n        if matches:\n            if matches[1] &gt;= min_score:\n                name = matches[0]\n            else:\n                self.LOGGER.info(f\"No match found for {name} due to score\")\n                return \"\"\n        else:\n            self.LOGGER.info(f\"No match found for {name}\")\n            return \"\"\n        matched_id = lookup.loc[lookup[f\"{type}_name\"] == name, f\"{type}_id\"].iloc[0]\n        return matched_id\n\n    def _convert_names_to_ids(\n        self, type: str, names: Union[str, List[str]]\n    ) -&gt; Union[str, List[str], None]:\n        \"\"\"Converts a name or list of names to an id or list of ids\n\n        Args:\n            type (str): type of name\n            names (str,List[str]): a name or list of names\n\n        Returns:\n            str or List[str]: the matched ids\n        \"\"\"\n        ids: List[str] = []\n        if names is None:\n            return None\n        if isinstance(names, str):\n            return self._convert_name_to_id(type, names)\n        else:\n            for n in names:\n                ids.append(self._convert_name_to_id(type, n))\n            return ids\n\n    def _check_leagues(self, leagues: Union[str, List[str], None]) -&gt; None:\n        \"\"\"Validates the leagues parameter\n\n        Args:\n            leagues (str, List[str], None): league abbreviation or list of league abbreviations\n        \"\"\"\n        if leagues:\n            if isinstance(leagues, list):\n                for league in leagues:\n                    if league not in self.LEAGUES:\n                        self.LOGGER.info(\n                            f\"Leagues are limited only to the following options: {self.LEAGUES}.\"\n                        )\n                        raise SystemExit(1)\n            else:\n                if leagues not in self.LEAGUES:\n                    self.LOGGER.info(\n                        f\"Leagues are limited only to the following options: {self.LEAGUES}.\"\n                    )\n                    raise SystemExit(1)\n\n    def _check_leagues_salaries(self, leagues: Union[str, List[str], None]) -&gt; None:\n        \"\"\"Validates the leagues parameter for salary searches\n\n        Args:\n            leagues (str, List[str], None): league abbreviation or list of league abbreviations\n        \"\"\"\n        if leagues:\n            if isinstance(leagues, list):\n                if any([x != \"mls\" for x in leagues]):\n                    self.LOGGER.info(\"Only MLS salary data is publicly available.\")\n                    raise SystemExit(1)\n            else:\n                if leagues != \"mls\":\n                    self.LOGGER.info(\"Only MLS salary data is publicly available.\")\n                    raise SystemExit(1)\n\n    def _check_ids_names(\n        self, ids: Union[str, List[str], None], names: Union[str, List[str], None]\n    ) -&gt; None:\n        \"\"\"Makes sure only ids or names are passed to a function and verifies\n        they are the right data type.\n\n        Args:\n            ids (str, List[str], None): a single id or list of ids\n            names (str, List[str], None): a single name or list of names\n        \"\"\"\n        if ids and names:\n            self.LOGGER.info(\"Please specify only IDs or names, not both.\")\n            raise SystemExit(1)\n\n        if ids:\n            if not isinstance(ids, str) and not isinstance(ids, list):\n                self.LOGGER.info(\"IDs must be passed as a string or list of strings.\")\n                raise SystemExit(1)\n\n        if names:\n            if not isinstance(names, str) and not isinstance(names, list):\n                self.LOGGER.info(\"Names must be passed as a string or list of names.\")\n                raise SystemExit(1)\n\n    def _filter_entity(\n        self,\n        entity_all: DataFrame,\n        entity_type: str,\n        leagues: Union[str, List[str], None],\n        ids: Union[str, List[str], None] = None,\n        names: Union[str, List[str], None] = None,\n    ) -&gt; DataFrame:\n        \"\"\"Filters a DataFrame based on the arguments given.\n\n        Args:\n            entity_all (DataFrame): a DataFrame containing the complete set of data\n            entity_type (str): the type of data\n            leagues (Union[str, List[str], None]): league abbreviation or list of league abbreviations\n            ids (str, List[str], None): a single id or list of ids\n            names (str, List[str], None): a single name or list of names\n        Returns:\n            DataFrame\n        \"\"\"\n        self._check_leagues(leagues)\n        self._check_ids_names(ids, names)\n\n        entity = entity_all\n\n        if names:\n            converted_ids = self._convert_names_to_ids(entity_type, names)\n        else:\n            converted_ids = ids\n\n        if isinstance(leagues, str):\n            leagues = [leagues]\n        if isinstance(converted_ids, str):\n            converted_ids = [converted_ids]\n\n        if leagues:\n            entity = entity[entity[\"competition\"].isin(leagues)]\n\n        if converted_ids:\n            entity = entity[entity[f\"{entity_type}_id\"].isin(converted_ids)]\n\n        return entity\n\n    def _execute_query(\n        self, url: str, params: Dict[str, Union[str, List[str], None]]\n    ) -&gt; DataFrame:\n        \"\"\"Executes a query while handling the max number of responses from the API\n\n        Args:\n            url (str): the API endpoint to call\n            params (Dict[str, Union[str, List[str], None]): URL query strings\n\n        Returns:\n            DataFrame\n        \"\"\"\n        for k, v in params.items():\n            if isinstance(v, list):\n                params[k] = \",\".join(v)\n\n        temp_response = self._single_request(url, params)\n        response = temp_response\n\n        if isinstance(response, DataFrame):\n            offset = self.MAX_API_LIMIT\n\n            while len(temp_response.index) == self.MAX_API_LIMIT:\n                params[\"offset\"] = str(offset)\n                temp_response = self._single_request(url, params)\n                response = concat([response, temp_response], ignore_index=True)\n                offset = offset + self.MAX_API_LIMIT\n\n        return response\n\n    def _single_request(\n        self, url: str, params: Dict[str, Union[str, List[str], None]]\n    ) -&gt; DataFrame:\n        \"\"\"Handles single call to the API\n\n        Args:\n            url (str): the API endpoint to call\n            params (Dict[str, Union[str, List[str], None]): URL query strings\n\n        Returns:\n            DataFrame\n        \"\"\"\n        response = self.session.get(url=url, params=params)\n        response.raise_for_status()\n        resp_df = read_json(StringIO(json.dumps(response.json())))\n        return resp_df\n\n    def _get_stats(\n        self, leagues: Union[str, List[str]], type: str, entity: str, **kwargs\n    ) -&gt; DataFrame:\n        \"\"\"Handles calls to stats APIs\n\n        Args:\n            type (str): the API endpoint to call\n            entity (str): URL query strings\n            leagues (str, List[str], None): league abbreviation or list of league abbreviations\n\n        Keyword Args:\n            split_by_teams (bool): Logical indicator to group results by team.\n            split_by_seasons (bool): Logical indicator to group results by season.\n            split_by_positions (bool): Logical indicator to group results by positions. Results must be grouped by at least one of teams, positions, or seasons.\n            player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n            player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n            team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n            team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n            game_ids (Union[str, List[str]]): Game IDs on which to filter. Accepts a string or list of strings.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        self.LOGGER.info(f\"get_stats called with {locals()}\")\n        if type == \"salaries\":\n            self._check_leagues_salaries(leagues)\n            if (\n                entity == \"teams\"\n                and not kwargs.get(\"split_by_teams\", False)\n                and not kwargs.get(\"split_by_seasons\", False)\n                and not kwargs.get(\"split_by_positions\", False)\n            ):\n                kwargs[\"split_by_teams\"] = True\n        else:\n            self._check_leagues(leagues)\n\n        keys_string = \",\".join(list(kwargs.keys()))\n\n        if \"player_\" in keys_string:\n            self._check_ids_names(\n                kwargs.get(\"player_ids\", None), kwargs.get(\"player_names\", None)\n            )\n\n            if kwargs.get(\"player_names\", None):\n                kwargs[\"player_id\"] = self._convert_names_to_ids(\n                    \"player\", kwargs[\"player_names\"]\n                )\n                kwargs.pop(\"player_names\")\n            else:\n                kwargs[\"player_id\"] = kwargs[\"player_ids\"]\n                kwargs.pop(\"player_ids\")\n\n        if \"team_\" in keys_string:\n            self._check_ids_names(\n                kwargs.get(\"team_ids\", None), kwargs.get(\"team_names\", None)\n            )\n\n            if kwargs.get(\"team_names\", None):\n                kwargs[\"team_id\"] = self._convert_names_to_ids(\n                    \"team\", kwargs[\"team_names\"]\n                )\n                kwargs.pop(\"team_names\")\n            else:\n                kwargs[\"team_id\"] = kwargs[\"team_ids\"]\n                kwargs.pop(\"team_ids\")\n\n        if kwargs.get(\"game_ids\", None):\n            kwargs[\"game_id\"] = kwargs[\"game_ids\"]\n            kwargs.pop(\"game_ids\")\n\n        stats = DataFrame([])\n        if isinstance(leagues, str):\n            url = f\"{self.base_url}{leagues}/{entity}/{type}\"\n            response = self._execute_query(url, kwargs)\n\n            stats = response\n        elif isinstance(leagues, list):\n            for league in leagues:\n                url = f\"{self.base_url}{league}/{entity}/{type}\"\n\n                response = self._execute_query(url, kwargs)\n\n                stats = concat([stats, response])\n\n        return stats\n\n    def get_stadia(\n        self,\n        leagues: Union[str, List[str], None] = None,\n        ids: Union[str, List[str], None] = None,\n        names: Union[str, List[str], None] = None,\n    ) -&gt; DataFrame:\n        \"\"\"Get information associated with stadia\n\n        Args:\n            leagues (Union[str, List[str], None], optional): league abbreviation or list of league abbreviations. Defaults to None.\n            ids (Union[str, List[str], None], optional): a single id or list of ids. Defaults to None.\n            names (Union[str, List[str], None], optional): a single name or list of names. Defaults to None.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        if self.stadia is None:\n            self.stadia = self._get_entity(\"stadia\")\n        stadia = self._filter_entity(self.stadia, \"stadia\", leagues, ids, names)\n        return stadia\n\n    def get_referees(\n        self,\n        leagues: Union[str, List[str], None] = None,\n        ids: Union[str, List[str], None] = None,\n        names: Union[str, List[str], None] = None,\n    ) -&gt; DataFrame:\n        \"\"\"Get information associated with referees\n\n        Args:\n            leagues (Union[str, List[str], None], optional): league abbreviation or a list of league abbreviations. Defaults to None.\n            ids (Union[str, List[str], None], optional): a single referee id or a list of referee ids. Defaults to None.\n            names (Union[str, List[str], None], optional): a single referee name or a list of referee names. Defaults to None.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        if self.referees is None:\n            self.referees = self._get_entity(\"referee\")\n        referees = self._filter_entity(self.referees, \"referee\", leagues, ids, names)\n        return referees\n\n    def get_managers(\n        self,\n        leagues: Union[str, List[str], None] = None,\n        ids: Union[str, List[str], None] = None,\n        names: Union[str, List[str], None] = None,\n    ) -&gt; DataFrame:\n        \"\"\"Get information associated with managers\n\n        Args:\n            leagues (Union[str, List[str], None], optional): league abbreviation or a list of league abbreviations. Defaults to None.\n            ids (Union[str, List[str], None], optional): a single manager id or a list of manager ids. Defaults to None.\n            names (Union[str, List[str], None], optional): a single manager name or a list of manager names. Defaults to None.\n\n        Returns:\n            DataFrame_\n        \"\"\"\n        if self.managers is None:\n            self.managers = self._get_entity(\"manager\")\n        managers = self._filter_entity(self.managers, \"manager\", leagues, ids, names)\n        return managers\n\n    def get_teams(\n        self,\n        leagues: Union[str, List[str], None] = None,\n        ids: Union[str, List[str], None] = None,\n        names: Union[str, List[str], None] = None,\n    ) -&gt; DataFrame:\n        \"\"\"Get information associated with teams\n\n        Args:\n            leagues (Union[str, List[str], None], optional): league abbreviation or a list of league abbreviations. Defaults to None.\n            ids (Union[str, List[str], None], optional): a single team id or a list of team ids. Defaults to None.\n            names (Union[str, List[str], None], optional): a single team name or a list of team names. Defaults to None.\n\n        Returns:\n            DataFrame_\n        \"\"\"\n        if self.teams is None:\n            self.teams = self._get_entity(\"team\")\n        teams = self._filter_entity(self.teams, \"team\", leagues, ids, names)\n        return teams\n\n    def get_players(\n        self,\n        leagues: Union[str, List[str], None] = None,\n        ids: Union[str, List[str], None] = None,\n        names: Union[str, List[str], None] = None,\n    ) -&gt; DataFrame:\n        \"\"\"Get information associated with players\n\n        Args:\n            leagues (Union[str, List[str], None], optional): league abbreviation or a list of league abbreviations. Defaults to None.\n            ids (Union[str, List[str], None], optional): a single player id or a list of player ids. Defaults to None.\n            names (Union[str, List[str], None], optional): a single player name or a list of player names. Defaults to None.\n\n        Returns:\n            DataFrame_\n        \"\"\"\n        if self.players is None:\n            self.players = self._get_entity(\"player\")\n        players = self._filter_entity(self.players, \"player\", leagues, ids, names)\n        return players\n\n    def get_games(\n        self,\n        leagues: Union[str, List[str], None] = None,\n        game_ids: Union[str, List[str], None] = None,\n        team_ids: Union[str, List[str], None] = None,\n        team_names: Union[str, List[str], None] = None,\n        seasons: Union[str, List[str], None] = None,\n        stages: Union[str, List[str], None] = None,\n        status: Union[str, List[str], None] = None,\n    ) -&gt; DataFrame:\n        \"\"\"Get information related to games\n\n        Args:\n            leagues (Union[str, List[str], None], optional): league abbreviation or a list of league abbreviations. Defaults to None.\n            game_ids (Union[str, List[str], None], optional): a single game id or a list of game ids. Defaults to None.\n            team_ids (Union[str, List[str], None], optional): a single team id or a list of team ids. Defaults to None.\n            team_names (Union[str, List[str], None], optional): a single team name or a list of team names. Defaults to None.\n            seasons (Union[str, List[str], None], optional): a single year of a league season or a list of years. Defaults to None.\n            stages (Union[str, List[str], None], optional): a single stage of competition in which a game took place or list of stages. Defaults to None.\n            status (Union[str, List[str], None], optional): Describes the status (IE: if it's been played or otherwise) of a game. Can take a single value or a list of values. Valid keywords include: Abandoned, FullTime, PreMatch. Defaults to None.\n\n        Returns:\n            DataFrame_\n        \"\"\"\n        self._check_leagues(leagues)\n        self._check_ids_names(team_ids, team_names)\n\n        query: Dict[str, Union[str, List[str], None]] = {}\n\n        if game_ids:\n            query[\"game_id\"] = game_ids\n        if team_names:\n            query[\"team_id\"] = self._convert_names_to_ids(\"team\", team_names)\n        if team_ids:\n            query[\"team_id\"] = team_ids\n        if seasons:\n            query[\"season_name\"] = seasons\n        if stages:\n            query[\"stage_name\"] = stages\n        if status:\n            query[\"status\"] = status\n        if not leagues:\n            leagues = self.LEAGUES\n\n        games = DataFrame([])\n        if isinstance(leagues, str):\n            games_url = f\"{self.base_url}{leagues}/games\"\n            response = self._execute_query(games_url, query)\n\n            games = response\n        elif isinstance(leagues, list):\n            for league in leagues:\n                games_url = f\"{self.base_url}{league}/games\"\n                response = self._execute_query(games_url, query)\n\n                games = concat([games, response])\n\n        return games.sort_values(by=[\"date_time_utc\"], ascending=False)\n\n    def get_player_xgoals(\n        self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n    ) -&gt; DataFrame:\n        \"\"\"Retrieves a DataFrame containing player xG data meeting the specified conditions.\n\n        Args:\n            leagues (Union[str, List[str]], optional): League(s) on which to filter. Accepts a string or list of strings.\n\n        Keyword Args:\n            minimum_minutes (int): Minimum threshold for sum of minutes played.\n            minimum_shots (int): Minimum threshold for sum of shots.\n            minimum_key_passes (int): Minimum threshold for sum of key passes.\n            player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n            player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n            team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n            team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n            season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n            start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            shot_pattern (Union[str, List[str]]): Describes the possessing actions leading to the shot. Valid keywords include: 'Set piece', 'Corner', 'Free kick', 'Penalty', 'Fastbreak', and 'Regular'. Accepts a string or list of strings.\n            split_by_teams (bool): Logical indicator to group results by team.\n            split_by_seasons (bool): Logical indicator to group results by season.\n            split_by_games (bool): Logical indicator to group results by game.\n            stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n            general_position (Union[str, List[str]]): Describes the most common position played by each player over the specified period of time. Valid keywords include: 'GK', 'CB', 'FB', 'DM', 'CM', 'AM', 'W', and 'ST'. Accepts a string or list of strings.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        player_xgoals = self._get_stats(\n            leagues, type=\"xgoals\", entity=\"players\", **kwargs\n        )\n        return player_xgoals\n\n    def get_player_xpass(\n        self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n    ) -&gt; DataFrame:\n        \"\"\"Retrieves a DataFrame containing player xPass data meeting the specified conditions.\n\n        Args:\n            leagues (Union[str, List[str]], optional): League(s) on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n        Keyword Args:\n            minimum_minutes (int): Minimum threshold for sum of minutes played.\n            minimum_passes (int): Minimum threshold for sum of attempted passes.\n            player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n            player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n            team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n            team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n            season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n            start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            pass_origin_third (Union[str, List[str]]): Describes the third of the field from which the pass originated. Valid keywords include: 'Attacking', 'Middle', and 'Defensive'. Accepts a string or list of strings.\n            split_by_teams (bool): Logical indicator to group results by team.\n            split_by_seasons (bool): Logical indicator to group results by season.\n            split_by_games (bool): Logical indicator to group results by game.\n            stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n            general_position (Union[str, List[str]]): Describes the most common position played by each player over the specified period of time. Valid keywords include: 'GK', 'CB', 'FB', 'DM', 'CM', 'AM', 'W', and 'ST'. Accepts a string or list of strings.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        player_xpass = self._get_stats(\n            leagues, type=\"xpass\", entity=\"players\", **kwargs\n        )\n        return player_xpass\n\n    def get_player_goals_added(\n        self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n    ) -&gt; DataFrame:\n        \"\"\"Retrieves a DataFrame containing player g+ data meeting the specified conditions.\n\n        Args:\n            leagues (Union[str, List[str]], optional): League(s) on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n        Keyword Args:\n            minimum_minutes (int): Minimum threshold for sum of minutes played.\n            player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n            player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n            team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n            team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n            season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n            start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            split_by_teams (bool): Logical indicator to group results by team.\n            split_by_seasons (bool): Logical indicator to group results by season.\n            split_by_games (bool): Logical indicator to group results by game.\n            stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n            action_type (Union[str, List[str]]): Describes the goals added (g+) action type. Valid keywords include: 'Dribbling', 'Fouling', 'Interrupting', 'Passing', 'Receiving', and 'Shooting'. Accepts a string or list of strings.\n            general_position (Union[str, List[str]]): Describes the most common position played by each player over the specified period of time. Valid keywords include: 'GK', 'CB', 'FB', 'DM', 'CM', 'AM', 'W', and 'ST'. Accepts a string or list of strings.\n            above_replacement (bool): Logical indicator to compare players against replacement-level values. This will only return aggregated g+ values, rather than disaggregated g+ values by action type.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        player_goals_added = self._get_stats(\n            leagues, type=\"goals-added\", entity=\"players\", **kwargs\n        )\n        return player_goals_added\n\n    def get_player_salaries(\n        self, leagues: Union[str, List[str]] = \"mls\", **kwargs\n    ) -&gt; DataFrame:\n        \"\"\"Retrieves a DataFrame containing player salary data meeting the specified conditions\n\n        Args:\n            leagues (Union[str, List[str]], optional): Leagues on which to filter. Accepts a string or list of strings. Defaults to 'mls'.\n\n        Keyword Args:\n            player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n            player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n            team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n            team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n            position (Union[str, List[str]]): Describes the general position, as reported by the players' association. Valid keywords include: 'GK', 'D', 'M', and 'F'. Accepts a string or list of strings.\n            season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n            start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        player_salaries = self._get_stats(\n            leagues, type=\"salaries\", entity=\"players\", **kwargs\n        )\n        return player_salaries\n\n    def get_goalkeeper_xgoals(\n        self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n    ) -&gt; DataFrame:\n        \"\"\"Retrieves a DataFrame containing goalkeeper xG data meeting the specified conditions.\n\n        Args:\n         leagues (Union[str, List[str]], optional): League(s) on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n        Keyword Args:\n            minimum_minutes (int): Minimum threshold for sum of minutes played.\n            minimum_shots_faced (int): Minimum threshold for sum of shots faced.\n            player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n            player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n            team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n            team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n            season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n            start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            shot_pattern (Union[str, List[str]]): Describes the possessing actions leading to the shot. Valid keywords include: 'Set piece', 'Corner', 'Free kick', 'Penalty', 'Fastbreak', and 'Regular'. Accepts a string or list of strings.\n            split_by_teams (bool): Logical indicator to group results by team.\n            split_by_seasons (bool): Logical indicator to group results by season.\n            split_by_games (bool): Logical indicator to group results by game.\n            stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        goalkeeper_xgoals = self._get_stats(\n            leagues, type=\"xgoals\", entity=\"goalkeepers\", **kwargs\n        )\n        return goalkeeper_xgoals\n\n    def get_goalkeeper_goals_added(\n        self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n    ) -&gt; DataFrame:\n        \"\"\"Retrieves a DataFrame containing goalkeeper g+ data meeting the specified conditions.\n\n        Args:\n            leagues (Union[str, List[str]], optional): League(s) on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n        Keyword Args:\n            minimum_minutes (int): Minimum threshold for sum of minutes played.\n            player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n            player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n            team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n            team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n            season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n            start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            split_by_teams (bool): Logical indicator to group results by team.\n            split_by_seasons (bool): Logical indicator to group results by season.\n            split_by_games (bool): Logical indicator to group results by game.\n            stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n            action_type (Union[str, List[str]]): Describes the goals added (g+) action type. Valid keywords include: 'Dribbling', 'Fouling', 'Interrupting', 'Passing', 'Receiving', and 'Shooting'. Accepts a string or list of strings.\n            above_replacement (bool): Logical indicator to compare players against replacement-level values. This will only return aggregated g+ values, rather than disaggregated g+ values by action type.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        goalkeeper_goals_added = self._get_stats(\n            leagues, type=\"goals-added\", entity=\"goalkeepers\", **kwargs\n        )\n        return goalkeeper_goals_added\n\n    def get_team_xgoals(\n        self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n    ) -&gt; DataFrame:\n        \"\"\"Retrieves a DataFrame containing team xG data meeting the specified conditions.\n\n        Args:\n            leagues (Union[str, List[str]], optional): Leagues on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n        Keyword Args:\n            team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n            team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n            season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n            start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            shot_pattern (Union[str, List[str]]): Describes the possessing actions leading to the shot. Valid keywords include: 'Set piece', 'Corner', 'Free kick', 'Penalty', 'Fastbreak', and 'Regular'. Accepts a string or list of strings.\n            split_by_seasons (bool): Logical indicator to group results by season.\n            split_by_games (bool): Logical indicator to group results by game.\n            home_only (bool): Logical indicator to only include results from home games.\n            away_only (bool): Logical indicator to only include results from away games.\n            home_adjusted (bool): Logical indicator to adjust certain values based on the share of home games a team has played during the specified duration.\n            even_game_state (bool): Logical indicator to only include shots taken when the score was level.\n            stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        team_xgoals = self._get_stats(leagues, type=\"xgoals\", entity=\"teams\", **kwargs)\n        return team_xgoals\n\n    def get_team_xpass(\n        self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n    ) -&gt; DataFrame:\n        \"\"\"Retrieves a DataFrame containing team xPass data meeting the specified conditions.\n\n        Args:\n            leagues (Union[str, List[str]], optional): Leagues on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n        Keyword Args:\n            team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n            team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n            season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n            start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            pass_origin_third (Union[str, List[str]]): Describes the third of the field from which the pass originated. Valid keywords include: 'Attacking', 'Middle', and 'Defensive'. Accepts a string or list of strings.\n            split_by_seasons (bool): Logical indicator to group results by season.\n            split_by_games (bool): Logical indicator to group results by game.\n            home_only (bool): Logical indicator to only include results from home games.\n            away_only (bool): Logical indicator to only include results from away games.\n            stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        team_xpass = self._get_stats(leagues, type=\"xpass\", entity=\"teams\", **kwargs)\n        return team_xpass\n\n    def get_team_goals_added(\n        self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n    ) -&gt; DataFrame:\n        \"\"\"Retrieves a DataFrame containing team g+ data meeting the specified conditions.\n\n        Args:\n            leagues (Union[str, List[str]], optional): Leagues on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n        Keyword Args:\n            team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n            team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n            season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n            split_by_seasons (bool): Logical indicator to group results by season.\n            stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n            action_type (Union[str, List[str]]): Describes the goals added (g+) action type. Valid keywords include: 'Dribbling', 'Fouling', 'Interrupting', 'Passing', 'Receiving', and 'Shooting'. Accepts a string or list of strings.\n            zone (Union[int, List[int]]): Zone number on pitch. Zones 1-5 are the defensive-most zones, and zones 26-30 are the attacking-most zones. Accepts a number or list of numbers.\n            gamestate_trunc (Union[int, List[int]]): Integer (score differential) value between -2 and 2, inclusive. Gamestates more extreme than -2 and 2 have been included with -2 and 2, respectively. Accepts a number or list of numbers.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        team_goals_added = self._get_stats(\n            leagues, type=\"goals-added\", entity=\"teams\", **kwargs\n        )\n        return team_goals_added\n\n    def get_team_salaries(\n        self, leagues: Union[str, List[str]] = \"mls\", **kwargs\n    ) -&gt; DataFrame:\n        \"\"\"Retrieves a DataFrame containing team salary data meeting the specified conditions.\n\n        Args:\n            leagues (Union[str, List[str]], optional): Leagues on which to filter. Accepts a string or list of strings. Defaults to 'mls'.\n\n        Keyword Args:\n            team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n            team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n            season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n            split_by_teams (bool): Logical indicator to group results by team. Results must be grouped by at least one of teams, positions, or seasons. Value is True by default.\n            split_by_seasons (bool): Logical indicator to group results by season. Results must be grouped by at least one of teams, positions, or seasons.\n            split_by_positions (bool): Logical indicator to group results by positions. Results must be grouped by at least one of teams, positions, or seasons.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        team_salaries = self._get_stats(\n            leagues, type=\"salaries\", entity=\"teams\", **kwargs\n        )\n        return team_salaries\n\n    def get_game_xgoals(\n        self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n    ) -&gt; DataFrame:\n        \"\"\"Retrieves a DataFrame containing game xG data meeting the specified conditions.\n\n        Args:\n            leagues (Union[str, List[str]], optional): Leagues on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n        Keyword Args:\n            game_ids (Union[str, List[str]]): Game IDs on which to filter. Accepts a string or list of strings.\n            season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n            start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n            stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n\n        Returns:\n            DataFrame\n        \"\"\"\n        game_xgoals = self._get_stats(leagues, type=\"xgoals\", entity=\"games\", **kwargs)\n        return game_xgoals\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.__init__","title":"<code>__init__(proxies=None, logging_level='WARNING', lazy_load=True)</code>","text":"<p>Class constructor</p> <p>Parameters:</p> Name Type Description Default <code>proxies</code> <code>Optional[dict]</code> <p>A dictionary containing proxy mappings, see https://docs.python-requests.org/en/latest/user/advanced/#proxies. Defaults to None.</p> <code>None</code> <code>logging_level</code> <code>Optional[str]</code> <p>A string representing the logging level of the logger. Defaults to \"WARNING\".</p> <code>'WARNING'</code> <code>lazy_load</code> <code>Optional[bool]</code> <p>A boolean indicating whether to lazy load all entity data on initialization. Defaults to True.</p> <code>True</code> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def __init__(\n    self,\n    proxies: Optional[dict] = None,\n    logging_level: Optional[str] = \"WARNING\",\n    lazy_load: Optional[bool] = True,\n) -&gt; None:\n    \"\"\"Class constructor\n\n    Args:\n        proxies (Optional[dict], optional): A dictionary containing proxy mappings, see https://docs.python-requests.org/en/latest/user/advanced/#proxies. Defaults to None.\n        logging_level (Optional[str], optional): A string representing the logging level of the logger. Defaults to \"WARNING\".\n        lazy_load (Optional[bool], optional): A boolean indicating whether to lazy load all entity data on initialization. Defaults to True.\n    \"\"\"\n    SESSION = requests.session()\n    if proxies:\n        SESSION.proxies.update(proxies)\n    CACHE_SESSION = CacheControl(SESSION, heuristic=ExpiresAfter(days=1))\n\n    if logging_level:\n        if logging_level.upper() in [\n            \"DEBUG\",\n            \"INFO\",\n            \"WARNING\",\n            \"ERROR\",\n            \"CRITICAL\",\n        ]:\n            self.LOGGER.setLevel(getLevelName(logging_level.upper()))\n        else:\n            self.LOGGER.info(f\"Logging level {logging_level} not recognized!\")\n\n    self.session = CACHE_SESSION\n    self.base_url = self.BASE_URL\n    self.lazy_load = lazy_load\n\n    self.players: DataFrame = None\n    self.teams: DataFrame = None\n    self.stadia: DataFrame = None\n    self.managers: DataFrame = None\n    self.referees: DataFrame = None\n\n    if self.lazy_load:\n        self.LOGGER.info(\n            \"Lazy loading enabled. Initializing client without entity data.\"\n        )\n    else:\n        self.LOGGER.info(\n            \"Lazy loading disabled. Initializing client with entity data.\"\n        )\n        self.players = self._get_entity(\"player\")\n        self.teams = self._get_entity(\"team\")\n        self.stadia = self._get_entity(\"stadia\")\n        self.managers = self._get_entity(\"manager\")\n        self.referees = self._get_entity(\"referee\")\n    self.LOGGER.info(\"Finished initializing client\")\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_game_xgoals","title":"<code>get_game_xgoals(leagues=LEAGUES, **kwargs)</code>","text":"<p>Retrieves a DataFrame containing game xG data meeting the specified conditions.</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str]]</code> <p>Leagues on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.</p> <code>LEAGUES</code> <p>Other Parameters:</p> Name Type Description <code>game_ids</code> <code>Union[str, List[str]]</code> <p>Game IDs on which to filter. Accepts a string or list of strings.</p> <code>season_name</code> <code>Union[str, List[str]]</code> <p>Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.</p> <code>start_date</code> <code>str</code> <p>Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>end_date</code> <code>str</code> <p>End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>stage_name</code> <code>Union[str, List[str]]</code> <p>Describes the stage of competition in which a game took place. Accepts a string or list of strings.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_game_xgoals(\n    self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n) -&gt; DataFrame:\n    \"\"\"Retrieves a DataFrame containing game xG data meeting the specified conditions.\n\n    Args:\n        leagues (Union[str, List[str]], optional): Leagues on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n    Keyword Args:\n        game_ids (Union[str, List[str]]): Game IDs on which to filter. Accepts a string or list of strings.\n        season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n        start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    game_xgoals = self._get_stats(leagues, type=\"xgoals\", entity=\"games\", **kwargs)\n    return game_xgoals\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_games","title":"<code>get_games(leagues=None, game_ids=None, team_ids=None, team_names=None, seasons=None, stages=None, status=None)</code>","text":"<p>Get information related to games</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str], None]</code> <p>league abbreviation or a list of league abbreviations. Defaults to None.</p> <code>None</code> <code>game_ids</code> <code>Union[str, List[str], None]</code> <p>a single game id or a list of game ids. Defaults to None.</p> <code>None</code> <code>team_ids</code> <code>Union[str, List[str], None]</code> <p>a single team id or a list of team ids. Defaults to None.</p> <code>None</code> <code>team_names</code> <code>Union[str, List[str], None]</code> <p>a single team name or a list of team names. Defaults to None.</p> <code>None</code> <code>seasons</code> <code>Union[str, List[str], None]</code> <p>a single year of a league season or a list of years. Defaults to None.</p> <code>None</code> <code>stages</code> <code>Union[str, List[str], None]</code> <p>a single stage of competition in which a game took place or list of stages. Defaults to None.</p> <code>None</code> <code>status</code> <code>Union[str, List[str], None]</code> <p>Describes the status (IE: if it's been played or otherwise) of a game. Can take a single value or a list of values. Valid keywords include: Abandoned, FullTime, PreMatch. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame_</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_games(\n    self,\n    leagues: Union[str, List[str], None] = None,\n    game_ids: Union[str, List[str], None] = None,\n    team_ids: Union[str, List[str], None] = None,\n    team_names: Union[str, List[str], None] = None,\n    seasons: Union[str, List[str], None] = None,\n    stages: Union[str, List[str], None] = None,\n    status: Union[str, List[str], None] = None,\n) -&gt; DataFrame:\n    \"\"\"Get information related to games\n\n    Args:\n        leagues (Union[str, List[str], None], optional): league abbreviation or a list of league abbreviations. Defaults to None.\n        game_ids (Union[str, List[str], None], optional): a single game id or a list of game ids. Defaults to None.\n        team_ids (Union[str, List[str], None], optional): a single team id or a list of team ids. Defaults to None.\n        team_names (Union[str, List[str], None], optional): a single team name or a list of team names. Defaults to None.\n        seasons (Union[str, List[str], None], optional): a single year of a league season or a list of years. Defaults to None.\n        stages (Union[str, List[str], None], optional): a single stage of competition in which a game took place or list of stages. Defaults to None.\n        status (Union[str, List[str], None], optional): Describes the status (IE: if it's been played or otherwise) of a game. Can take a single value or a list of values. Valid keywords include: Abandoned, FullTime, PreMatch. Defaults to None.\n\n    Returns:\n        DataFrame_\n    \"\"\"\n    self._check_leagues(leagues)\n    self._check_ids_names(team_ids, team_names)\n\n    query: Dict[str, Union[str, List[str], None]] = {}\n\n    if game_ids:\n        query[\"game_id\"] = game_ids\n    if team_names:\n        query[\"team_id\"] = self._convert_names_to_ids(\"team\", team_names)\n    if team_ids:\n        query[\"team_id\"] = team_ids\n    if seasons:\n        query[\"season_name\"] = seasons\n    if stages:\n        query[\"stage_name\"] = stages\n    if status:\n        query[\"status\"] = status\n    if not leagues:\n        leagues = self.LEAGUES\n\n    games = DataFrame([])\n    if isinstance(leagues, str):\n        games_url = f\"{self.base_url}{leagues}/games\"\n        response = self._execute_query(games_url, query)\n\n        games = response\n    elif isinstance(leagues, list):\n        for league in leagues:\n            games_url = f\"{self.base_url}{league}/games\"\n            response = self._execute_query(games_url, query)\n\n            games = concat([games, response])\n\n    return games.sort_values(by=[\"date_time_utc\"], ascending=False)\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_goalkeeper_goals_added","title":"<code>get_goalkeeper_goals_added(leagues=LEAGUES, **kwargs)</code>","text":"<p>Retrieves a DataFrame containing goalkeeper g+ data meeting the specified conditions.</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str]]</code> <p>League(s) on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.</p> <code>LEAGUES</code> <p>Other Parameters:</p> Name Type Description <code>minimum_minutes</code> <code>int</code> <p>Minimum threshold for sum of minutes played.</p> <code>player_ids</code> <code>Union[str, List[str]]</code> <p>Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.</p> <code>player_names</code> <code>Union[str, List[str]]</code> <p>Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.</p> <code>team_ids</code> <code>Union[str, List[str]]</code> <p>Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.</p> <code>team_names</code> <code>Union[str, List[str]]</code> <p>Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.</p> <code>season_name</code> <code>Union[str, List[str]]</code> <p>Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.</p> <code>start_date</code> <code>str</code> <p>Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>end_date</code> <code>str</code> <p>End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>split_by_teams</code> <code>bool</code> <p>Logical indicator to group results by team.</p> <code>split_by_seasons</code> <code>bool</code> <p>Logical indicator to group results by season.</p> <code>split_by_games</code> <code>bool</code> <p>Logical indicator to group results by game.</p> <code>stage_name</code> <code>Union[str, List[str]]</code> <p>Describes the stage of competition in which a game took place. Accepts a string or list of strings.</p> <code>action_type</code> <code>Union[str, List[str]]</code> <p>Describes the goals added (g+) action type. Valid keywords include: 'Dribbling', 'Fouling', 'Interrupting', 'Passing', 'Receiving', and 'Shooting'. Accepts a string or list of strings.</p> <code>above_replacement</code> <code>bool</code> <p>Logical indicator to compare players against replacement-level values. This will only return aggregated g+ values, rather than disaggregated g+ values by action type.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_goalkeeper_goals_added(\n    self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n) -&gt; DataFrame:\n    \"\"\"Retrieves a DataFrame containing goalkeeper g+ data meeting the specified conditions.\n\n    Args:\n        leagues (Union[str, List[str]], optional): League(s) on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n    Keyword Args:\n        minimum_minutes (int): Minimum threshold for sum of minutes played.\n        player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n        player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n        team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n        team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n        season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n        start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        split_by_teams (bool): Logical indicator to group results by team.\n        split_by_seasons (bool): Logical indicator to group results by season.\n        split_by_games (bool): Logical indicator to group results by game.\n        stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n        action_type (Union[str, List[str]]): Describes the goals added (g+) action type. Valid keywords include: 'Dribbling', 'Fouling', 'Interrupting', 'Passing', 'Receiving', and 'Shooting'. Accepts a string or list of strings.\n        above_replacement (bool): Logical indicator to compare players against replacement-level values. This will only return aggregated g+ values, rather than disaggregated g+ values by action type.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    goalkeeper_goals_added = self._get_stats(\n        leagues, type=\"goals-added\", entity=\"goalkeepers\", **kwargs\n    )\n    return goalkeeper_goals_added\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_goalkeeper_xgoals","title":"<code>get_goalkeeper_xgoals(leagues=LEAGUES, **kwargs)</code>","text":"<p>Retrieves a DataFrame containing goalkeeper xG data meeting the specified conditions.</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str]]</code> <p>League(s) on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.</p> <code>LEAGUES</code> <p>Other Parameters:</p> Name Type Description <code>minimum_minutes</code> <code>int</code> <p>Minimum threshold for sum of minutes played.</p> <code>minimum_shots_faced</code> <code>int</code> <p>Minimum threshold for sum of shots faced.</p> <code>player_ids</code> <code>Union[str, List[str]]</code> <p>Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.</p> <code>player_names</code> <code>Union[str, List[str]]</code> <p>Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.</p> <code>team_ids</code> <code>Union[str, List[str]]</code> <p>Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.</p> <code>team_names</code> <code>Union[str, List[str]]</code> <p>Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.</p> <code>season_name</code> <code>Union[str, List[str]]</code> <p>Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.</p> <code>start_date</code> <code>str</code> <p>Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>end_date</code> <code>str</code> <p>End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>shot_pattern</code> <code>Union[str, List[str]]</code> <p>Describes the possessing actions leading to the shot. Valid keywords include: 'Set piece', 'Corner', 'Free kick', 'Penalty', 'Fastbreak', and 'Regular'. Accepts a string or list of strings.</p> <code>split_by_teams</code> <code>bool</code> <p>Logical indicator to group results by team.</p> <code>split_by_seasons</code> <code>bool</code> <p>Logical indicator to group results by season.</p> <code>split_by_games</code> <code>bool</code> <p>Logical indicator to group results by game.</p> <code>stage_name</code> <code>Union[str, List[str]]</code> <p>Describes the stage of competition in which a game took place. Accepts a string or list of strings.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_goalkeeper_xgoals(\n    self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n) -&gt; DataFrame:\n    \"\"\"Retrieves a DataFrame containing goalkeeper xG data meeting the specified conditions.\n\n    Args:\n     leagues (Union[str, List[str]], optional): League(s) on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n    Keyword Args:\n        minimum_minutes (int): Minimum threshold for sum of minutes played.\n        minimum_shots_faced (int): Minimum threshold for sum of shots faced.\n        player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n        player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n        team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n        team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n        season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n        start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        shot_pattern (Union[str, List[str]]): Describes the possessing actions leading to the shot. Valid keywords include: 'Set piece', 'Corner', 'Free kick', 'Penalty', 'Fastbreak', and 'Regular'. Accepts a string or list of strings.\n        split_by_teams (bool): Logical indicator to group results by team.\n        split_by_seasons (bool): Logical indicator to group results by season.\n        split_by_games (bool): Logical indicator to group results by game.\n        stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    goalkeeper_xgoals = self._get_stats(\n        leagues, type=\"xgoals\", entity=\"goalkeepers\", **kwargs\n    )\n    return goalkeeper_xgoals\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_managers","title":"<code>get_managers(leagues=None, ids=None, names=None)</code>","text":"<p>Get information associated with managers</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str], None]</code> <p>league abbreviation or a list of league abbreviations. Defaults to None.</p> <code>None</code> <code>ids</code> <code>Union[str, List[str], None]</code> <p>a single manager id or a list of manager ids. Defaults to None.</p> <code>None</code> <code>names</code> <code>Union[str, List[str], None]</code> <p>a single manager name or a list of manager names. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame_</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_managers(\n    self,\n    leagues: Union[str, List[str], None] = None,\n    ids: Union[str, List[str], None] = None,\n    names: Union[str, List[str], None] = None,\n) -&gt; DataFrame:\n    \"\"\"Get information associated with managers\n\n    Args:\n        leagues (Union[str, List[str], None], optional): league abbreviation or a list of league abbreviations. Defaults to None.\n        ids (Union[str, List[str], None], optional): a single manager id or a list of manager ids. Defaults to None.\n        names (Union[str, List[str], None], optional): a single manager name or a list of manager names. Defaults to None.\n\n    Returns:\n        DataFrame_\n    \"\"\"\n    if self.managers is None:\n        self.managers = self._get_entity(\"manager\")\n    managers = self._filter_entity(self.managers, \"manager\", leagues, ids, names)\n    return managers\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_player_goals_added","title":"<code>get_player_goals_added(leagues=LEAGUES, **kwargs)</code>","text":"<p>Retrieves a DataFrame containing player g+ data meeting the specified conditions.</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str]]</code> <p>League(s) on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.</p> <code>LEAGUES</code> <p>Other Parameters:</p> Name Type Description <code>minimum_minutes</code> <code>int</code> <p>Minimum threshold for sum of minutes played.</p> <code>player_ids</code> <code>Union[str, List[str]]</code> <p>Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.</p> <code>player_names</code> <code>Union[str, List[str]]</code> <p>Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.</p> <code>team_ids</code> <code>Union[str, List[str]]</code> <p>Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.</p> <code>team_names</code> <code>Union[str, List[str]]</code> <p>Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.</p> <code>season_name</code> <code>Union[str, List[str]]</code> <p>Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.</p> <code>start_date</code> <code>str</code> <p>Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>end_date</code> <code>str</code> <p>End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>split_by_teams</code> <code>bool</code> <p>Logical indicator to group results by team.</p> <code>split_by_seasons</code> <code>bool</code> <p>Logical indicator to group results by season.</p> <code>split_by_games</code> <code>bool</code> <p>Logical indicator to group results by game.</p> <code>stage_name</code> <code>Union[str, List[str]]</code> <p>Describes the stage of competition in which a game took place. Accepts a string or list of strings.</p> <code>action_type</code> <code>Union[str, List[str]]</code> <p>Describes the goals added (g+) action type. Valid keywords include: 'Dribbling', 'Fouling', 'Interrupting', 'Passing', 'Receiving', and 'Shooting'. Accepts a string or list of strings.</p> <code>general_position</code> <code>Union[str, List[str]]</code> <p>Describes the most common position played by each player over the specified period of time. Valid keywords include: 'GK', 'CB', 'FB', 'DM', 'CM', 'AM', 'W', and 'ST'. Accepts a string or list of strings.</p> <code>above_replacement</code> <code>bool</code> <p>Logical indicator to compare players against replacement-level values. This will only return aggregated g+ values, rather than disaggregated g+ values by action type.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_player_goals_added(\n    self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n) -&gt; DataFrame:\n    \"\"\"Retrieves a DataFrame containing player g+ data meeting the specified conditions.\n\n    Args:\n        leagues (Union[str, List[str]], optional): League(s) on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n    Keyword Args:\n        minimum_minutes (int): Minimum threshold for sum of minutes played.\n        player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n        player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n        team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n        team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n        season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n        start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        split_by_teams (bool): Logical indicator to group results by team.\n        split_by_seasons (bool): Logical indicator to group results by season.\n        split_by_games (bool): Logical indicator to group results by game.\n        stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n        action_type (Union[str, List[str]]): Describes the goals added (g+) action type. Valid keywords include: 'Dribbling', 'Fouling', 'Interrupting', 'Passing', 'Receiving', and 'Shooting'. Accepts a string or list of strings.\n        general_position (Union[str, List[str]]): Describes the most common position played by each player over the specified period of time. Valid keywords include: 'GK', 'CB', 'FB', 'DM', 'CM', 'AM', 'W', and 'ST'. Accepts a string or list of strings.\n        above_replacement (bool): Logical indicator to compare players against replacement-level values. This will only return aggregated g+ values, rather than disaggregated g+ values by action type.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    player_goals_added = self._get_stats(\n        leagues, type=\"goals-added\", entity=\"players\", **kwargs\n    )\n    return player_goals_added\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_player_salaries","title":"<code>get_player_salaries(leagues='mls', **kwargs)</code>","text":"<p>Retrieves a DataFrame containing player salary data meeting the specified conditions</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str]]</code> <p>Leagues on which to filter. Accepts a string or list of strings. Defaults to 'mls'.</p> <code>'mls'</code> <p>Other Parameters:</p> Name Type Description <code>player_ids</code> <code>Union[str, List[str]]</code> <p>Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.</p> <code>player_names</code> <code>Union[str, List[str]]</code> <p>Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.</p> <code>team_ids</code> <code>Union[str, List[str]]</code> <p>Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.</p> <code>team_names</code> <code>Union[str, List[str]]</code> <p>Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.</p> <code>position</code> <code>Union[str, List[str]]</code> <p>Describes the general position, as reported by the players' association. Valid keywords include: 'GK', 'D', 'M', and 'F'. Accepts a string or list of strings.</p> <code>season_name</code> <code>Union[str, List[str]]</code> <p>Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.</p> <code>start_date</code> <code>str</code> <p>Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>end_date</code> <code>str</code> <p>End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_player_salaries(\n    self, leagues: Union[str, List[str]] = \"mls\", **kwargs\n) -&gt; DataFrame:\n    \"\"\"Retrieves a DataFrame containing player salary data meeting the specified conditions\n\n    Args:\n        leagues (Union[str, List[str]], optional): Leagues on which to filter. Accepts a string or list of strings. Defaults to 'mls'.\n\n    Keyword Args:\n        player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n        player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n        team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n        team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n        position (Union[str, List[str]]): Describes the general position, as reported by the players' association. Valid keywords include: 'GK', 'D', 'M', and 'F'. Accepts a string or list of strings.\n        season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n        start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    player_salaries = self._get_stats(\n        leagues, type=\"salaries\", entity=\"players\", **kwargs\n    )\n    return player_salaries\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_player_xgoals","title":"<code>get_player_xgoals(leagues=LEAGUES, **kwargs)</code>","text":"<p>Retrieves a DataFrame containing player xG data meeting the specified conditions.</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str]]</code> <p>League(s) on which to filter. Accepts a string or list of strings.</p> <code>LEAGUES</code> <p>Other Parameters:</p> Name Type Description <code>minimum_minutes</code> <code>int</code> <p>Minimum threshold for sum of minutes played.</p> <code>minimum_shots</code> <code>int</code> <p>Minimum threshold for sum of shots.</p> <code>minimum_key_passes</code> <code>int</code> <p>Minimum threshold for sum of key passes.</p> <code>player_ids</code> <code>Union[str, List[str]]</code> <p>Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.</p> <code>player_names</code> <code>Union[str, List[str]]</code> <p>Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.</p> <code>team_ids</code> <code>Union[str, List[str]]</code> <p>Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.</p> <code>team_names</code> <code>Union[str, List[str]]</code> <p>Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.</p> <code>season_name</code> <code>Union[str, List[str]]</code> <p>Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.</p> <code>start_date</code> <code>str</code> <p>Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>end_date</code> <code>str</code> <p>End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>shot_pattern</code> <code>Union[str, List[str]]</code> <p>Describes the possessing actions leading to the shot. Valid keywords include: 'Set piece', 'Corner', 'Free kick', 'Penalty', 'Fastbreak', and 'Regular'. Accepts a string or list of strings.</p> <code>split_by_teams</code> <code>bool</code> <p>Logical indicator to group results by team.</p> <code>split_by_seasons</code> <code>bool</code> <p>Logical indicator to group results by season.</p> <code>split_by_games</code> <code>bool</code> <p>Logical indicator to group results by game.</p> <code>stage_name</code> <code>Union[str, List[str]]</code> <p>Describes the stage of competition in which a game took place. Accepts a string or list of strings.</p> <code>general_position</code> <code>Union[str, List[str]]</code> <p>Describes the most common position played by each player over the specified period of time. Valid keywords include: 'GK', 'CB', 'FB', 'DM', 'CM', 'AM', 'W', and 'ST'. Accepts a string or list of strings.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_player_xgoals(\n    self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n) -&gt; DataFrame:\n    \"\"\"Retrieves a DataFrame containing player xG data meeting the specified conditions.\n\n    Args:\n        leagues (Union[str, List[str]], optional): League(s) on which to filter. Accepts a string or list of strings.\n\n    Keyword Args:\n        minimum_minutes (int): Minimum threshold for sum of minutes played.\n        minimum_shots (int): Minimum threshold for sum of shots.\n        minimum_key_passes (int): Minimum threshold for sum of key passes.\n        player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n        player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n        team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n        team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n        season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n        start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        shot_pattern (Union[str, List[str]]): Describes the possessing actions leading to the shot. Valid keywords include: 'Set piece', 'Corner', 'Free kick', 'Penalty', 'Fastbreak', and 'Regular'. Accepts a string or list of strings.\n        split_by_teams (bool): Logical indicator to group results by team.\n        split_by_seasons (bool): Logical indicator to group results by season.\n        split_by_games (bool): Logical indicator to group results by game.\n        stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n        general_position (Union[str, List[str]]): Describes the most common position played by each player over the specified period of time. Valid keywords include: 'GK', 'CB', 'FB', 'DM', 'CM', 'AM', 'W', and 'ST'. Accepts a string or list of strings.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    player_xgoals = self._get_stats(\n        leagues, type=\"xgoals\", entity=\"players\", **kwargs\n    )\n    return player_xgoals\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_player_xpass","title":"<code>get_player_xpass(leagues=LEAGUES, **kwargs)</code>","text":"<p>Retrieves a DataFrame containing player xPass data meeting the specified conditions.</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str]]</code> <p>League(s) on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.</p> <code>LEAGUES</code> <p>Other Parameters:</p> Name Type Description <code>minimum_minutes</code> <code>int</code> <p>Minimum threshold for sum of minutes played.</p> <code>minimum_passes</code> <code>int</code> <p>Minimum threshold for sum of attempted passes.</p> <code>player_ids</code> <code>Union[str, List[str]]</code> <p>Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.</p> <code>player_names</code> <code>Union[str, List[str]]</code> <p>Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.</p> <code>team_ids</code> <code>Union[str, List[str]]</code> <p>Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.</p> <code>team_names</code> <code>Union[str, List[str]]</code> <p>Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.</p> <code>season_name</code> <code>Union[str, List[str]]</code> <p>Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.</p> <code>start_date</code> <code>str</code> <p>Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>end_date</code> <code>str</code> <p>End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>pass_origin_third</code> <code>Union[str, List[str]]</code> <p>Describes the third of the field from which the pass originated. Valid keywords include: 'Attacking', 'Middle', and 'Defensive'. Accepts a string or list of strings.</p> <code>split_by_teams</code> <code>bool</code> <p>Logical indicator to group results by team.</p> <code>split_by_seasons</code> <code>bool</code> <p>Logical indicator to group results by season.</p> <code>split_by_games</code> <code>bool</code> <p>Logical indicator to group results by game.</p> <code>stage_name</code> <code>Union[str, List[str]]</code> <p>Describes the stage of competition in which a game took place. Accepts a string or list of strings.</p> <code>general_position</code> <code>Union[str, List[str]]</code> <p>Describes the most common position played by each player over the specified period of time. Valid keywords include: 'GK', 'CB', 'FB', 'DM', 'CM', 'AM', 'W', and 'ST'. Accepts a string or list of strings.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_player_xpass(\n    self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n) -&gt; DataFrame:\n    \"\"\"Retrieves a DataFrame containing player xPass data meeting the specified conditions.\n\n    Args:\n        leagues (Union[str, List[str]], optional): League(s) on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n    Keyword Args:\n        minimum_minutes (int): Minimum threshold for sum of minutes played.\n        minimum_passes (int): Minimum threshold for sum of attempted passes.\n        player_ids (Union[str, List[str]]): Player IDs on which to filter. Cannot be combined with player_names. Accepts a string or list of strings.\n        player_names (Union[str, List[str]]): Player names on which to filter. Partial matches are accepted. Cannot be combined with player_ids. Accepts a string or list of strings.\n        team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n        team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n        season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n        start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        pass_origin_third (Union[str, List[str]]): Describes the third of the field from which the pass originated. Valid keywords include: 'Attacking', 'Middle', and 'Defensive'. Accepts a string or list of strings.\n        split_by_teams (bool): Logical indicator to group results by team.\n        split_by_seasons (bool): Logical indicator to group results by season.\n        split_by_games (bool): Logical indicator to group results by game.\n        stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n        general_position (Union[str, List[str]]): Describes the most common position played by each player over the specified period of time. Valid keywords include: 'GK', 'CB', 'FB', 'DM', 'CM', 'AM', 'W', and 'ST'. Accepts a string or list of strings.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    player_xpass = self._get_stats(\n        leagues, type=\"xpass\", entity=\"players\", **kwargs\n    )\n    return player_xpass\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_players","title":"<code>get_players(leagues=None, ids=None, names=None)</code>","text":"<p>Get information associated with players</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str], None]</code> <p>league abbreviation or a list of league abbreviations. Defaults to None.</p> <code>None</code> <code>ids</code> <code>Union[str, List[str], None]</code> <p>a single player id or a list of player ids. Defaults to None.</p> <code>None</code> <code>names</code> <code>Union[str, List[str], None]</code> <p>a single player name or a list of player names. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame_</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_players(\n    self,\n    leagues: Union[str, List[str], None] = None,\n    ids: Union[str, List[str], None] = None,\n    names: Union[str, List[str], None] = None,\n) -&gt; DataFrame:\n    \"\"\"Get information associated with players\n\n    Args:\n        leagues (Union[str, List[str], None], optional): league abbreviation or a list of league abbreviations. Defaults to None.\n        ids (Union[str, List[str], None], optional): a single player id or a list of player ids. Defaults to None.\n        names (Union[str, List[str], None], optional): a single player name or a list of player names. Defaults to None.\n\n    Returns:\n        DataFrame_\n    \"\"\"\n    if self.players is None:\n        self.players = self._get_entity(\"player\")\n    players = self._filter_entity(self.players, \"player\", leagues, ids, names)\n    return players\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_referees","title":"<code>get_referees(leagues=None, ids=None, names=None)</code>","text":"<p>Get information associated with referees</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str], None]</code> <p>league abbreviation or a list of league abbreviations. Defaults to None.</p> <code>None</code> <code>ids</code> <code>Union[str, List[str], None]</code> <p>a single referee id or a list of referee ids. Defaults to None.</p> <code>None</code> <code>names</code> <code>Union[str, List[str], None]</code> <p>a single referee name or a list of referee names. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_referees(\n    self,\n    leagues: Union[str, List[str], None] = None,\n    ids: Union[str, List[str], None] = None,\n    names: Union[str, List[str], None] = None,\n) -&gt; DataFrame:\n    \"\"\"Get information associated with referees\n\n    Args:\n        leagues (Union[str, List[str], None], optional): league abbreviation or a list of league abbreviations. Defaults to None.\n        ids (Union[str, List[str], None], optional): a single referee id or a list of referee ids. Defaults to None.\n        names (Union[str, List[str], None], optional): a single referee name or a list of referee names. Defaults to None.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    if self.referees is None:\n        self.referees = self._get_entity(\"referee\")\n    referees = self._filter_entity(self.referees, \"referee\", leagues, ids, names)\n    return referees\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_stadia","title":"<code>get_stadia(leagues=None, ids=None, names=None)</code>","text":"<p>Get information associated with stadia</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str], None]</code> <p>league abbreviation or list of league abbreviations. Defaults to None.</p> <code>None</code> <code>ids</code> <code>Union[str, List[str], None]</code> <p>a single id or list of ids. Defaults to None.</p> <code>None</code> <code>names</code> <code>Union[str, List[str], None]</code> <p>a single name or list of names. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_stadia(\n    self,\n    leagues: Union[str, List[str], None] = None,\n    ids: Union[str, List[str], None] = None,\n    names: Union[str, List[str], None] = None,\n) -&gt; DataFrame:\n    \"\"\"Get information associated with stadia\n\n    Args:\n        leagues (Union[str, List[str], None], optional): league abbreviation or list of league abbreviations. Defaults to None.\n        ids (Union[str, List[str], None], optional): a single id or list of ids. Defaults to None.\n        names (Union[str, List[str], None], optional): a single name or list of names. Defaults to None.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    if self.stadia is None:\n        self.stadia = self._get_entity(\"stadia\")\n    stadia = self._filter_entity(self.stadia, \"stadia\", leagues, ids, names)\n    return stadia\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_team_goals_added","title":"<code>get_team_goals_added(leagues=LEAGUES, **kwargs)</code>","text":"<p>Retrieves a DataFrame containing team g+ data meeting the specified conditions.</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str]]</code> <p>Leagues on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.</p> <code>LEAGUES</code> <p>Other Parameters:</p> Name Type Description <code>team_ids</code> <code>Union[str, List[str]]</code> <p>Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.</p> <code>team_names</code> <code>Union[str, List[str]]</code> <p>Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.</p> <code>season_name</code> <code>Union[str, List[str]]</code> <p>Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.</p> <code>split_by_seasons</code> <code>bool</code> <p>Logical indicator to group results by season.</p> <code>stage_name</code> <code>Union[str, List[str]]</code> <p>Describes the stage of competition in which a game took place. Accepts a string or list of strings.</p> <code>action_type</code> <code>Union[str, List[str]]</code> <p>Describes the goals added (g+) action type. Valid keywords include: 'Dribbling', 'Fouling', 'Interrupting', 'Passing', 'Receiving', and 'Shooting'. Accepts a string or list of strings.</p> <code>zone</code> <code>Union[int, List[int]]</code> <p>Zone number on pitch. Zones 1-5 are the defensive-most zones, and zones 26-30 are the attacking-most zones. Accepts a number or list of numbers.</p> <code>gamestate_trunc</code> <code>Union[int, List[int]]</code> <p>Integer (score differential) value between -2 and 2, inclusive. Gamestates more extreme than -2 and 2 have been included with -2 and 2, respectively. Accepts a number or list of numbers.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_team_goals_added(\n    self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n) -&gt; DataFrame:\n    \"\"\"Retrieves a DataFrame containing team g+ data meeting the specified conditions.\n\n    Args:\n        leagues (Union[str, List[str]], optional): Leagues on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n    Keyword Args:\n        team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n        team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n        season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n        split_by_seasons (bool): Logical indicator to group results by season.\n        stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n        action_type (Union[str, List[str]]): Describes the goals added (g+) action type. Valid keywords include: 'Dribbling', 'Fouling', 'Interrupting', 'Passing', 'Receiving', and 'Shooting'. Accepts a string or list of strings.\n        zone (Union[int, List[int]]): Zone number on pitch. Zones 1-5 are the defensive-most zones, and zones 26-30 are the attacking-most zones. Accepts a number or list of numbers.\n        gamestate_trunc (Union[int, List[int]]): Integer (score differential) value between -2 and 2, inclusive. Gamestates more extreme than -2 and 2 have been included with -2 and 2, respectively. Accepts a number or list of numbers.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    team_goals_added = self._get_stats(\n        leagues, type=\"goals-added\", entity=\"teams\", **kwargs\n    )\n    return team_goals_added\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_team_salaries","title":"<code>get_team_salaries(leagues='mls', **kwargs)</code>","text":"<p>Retrieves a DataFrame containing team salary data meeting the specified conditions.</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str]]</code> <p>Leagues on which to filter. Accepts a string or list of strings. Defaults to 'mls'.</p> <code>'mls'</code> <p>Other Parameters:</p> Name Type Description <code>team_ids</code> <code>Union[str, List[str]]</code> <p>Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.</p> <code>team_names</code> <code>Union[str, List[str]]</code> <p>Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.</p> <code>season_name</code> <code>Union[str, List[str]]</code> <p>Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.</p> <code>split_by_teams</code> <code>bool</code> <p>Logical indicator to group results by team. Results must be grouped by at least one of teams, positions, or seasons. Value is True by default.</p> <code>split_by_seasons</code> <code>bool</code> <p>Logical indicator to group results by season. Results must be grouped by at least one of teams, positions, or seasons.</p> <code>split_by_positions</code> <code>bool</code> <p>Logical indicator to group results by positions. Results must be grouped by at least one of teams, positions, or seasons.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_team_salaries(\n    self, leagues: Union[str, List[str]] = \"mls\", **kwargs\n) -&gt; DataFrame:\n    \"\"\"Retrieves a DataFrame containing team salary data meeting the specified conditions.\n\n    Args:\n        leagues (Union[str, List[str]], optional): Leagues on which to filter. Accepts a string or list of strings. Defaults to 'mls'.\n\n    Keyword Args:\n        team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n        team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n        season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n        split_by_teams (bool): Logical indicator to group results by team. Results must be grouped by at least one of teams, positions, or seasons. Value is True by default.\n        split_by_seasons (bool): Logical indicator to group results by season. Results must be grouped by at least one of teams, positions, or seasons.\n        split_by_positions (bool): Logical indicator to group results by positions. Results must be grouped by at least one of teams, positions, or seasons.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    team_salaries = self._get_stats(\n        leagues, type=\"salaries\", entity=\"teams\", **kwargs\n    )\n    return team_salaries\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_team_xgoals","title":"<code>get_team_xgoals(leagues=LEAGUES, **kwargs)</code>","text":"<p>Retrieves a DataFrame containing team xG data meeting the specified conditions.</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str]]</code> <p>Leagues on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.</p> <code>LEAGUES</code> <p>Other Parameters:</p> Name Type Description <code>team_ids</code> <code>Union[str, List[str]]</code> <p>Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.</p> <code>team_names</code> <code>Union[str, List[str]]</code> <p>Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.</p> <code>season_name</code> <code>Union[str, List[str]]</code> <p>Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.</p> <code>start_date</code> <code>str</code> <p>Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>end_date</code> <code>str</code> <p>End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>shot_pattern</code> <code>Union[str, List[str]]</code> <p>Describes the possessing actions leading to the shot. Valid keywords include: 'Set piece', 'Corner', 'Free kick', 'Penalty', 'Fastbreak', and 'Regular'. Accepts a string or list of strings.</p> <code>split_by_seasons</code> <code>bool</code> <p>Logical indicator to group results by season.</p> <code>split_by_games</code> <code>bool</code> <p>Logical indicator to group results by game.</p> <code>home_only</code> <code>bool</code> <p>Logical indicator to only include results from home games.</p> <code>away_only</code> <code>bool</code> <p>Logical indicator to only include results from away games.</p> <code>home_adjusted</code> <code>bool</code> <p>Logical indicator to adjust certain values based on the share of home games a team has played during the specified duration.</p> <code>even_game_state</code> <code>bool</code> <p>Logical indicator to only include shots taken when the score was level.</p> <code>stage_name</code> <code>Union[str, List[str]]</code> <p>Describes the stage of competition in which a game took place. Accepts a string or list of strings.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_team_xgoals(\n    self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n) -&gt; DataFrame:\n    \"\"\"Retrieves a DataFrame containing team xG data meeting the specified conditions.\n\n    Args:\n        leagues (Union[str, List[str]], optional): Leagues on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n    Keyword Args:\n        team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n        team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n        season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n        start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        shot_pattern (Union[str, List[str]]): Describes the possessing actions leading to the shot. Valid keywords include: 'Set piece', 'Corner', 'Free kick', 'Penalty', 'Fastbreak', and 'Regular'. Accepts a string or list of strings.\n        split_by_seasons (bool): Logical indicator to group results by season.\n        split_by_games (bool): Logical indicator to group results by game.\n        home_only (bool): Logical indicator to only include results from home games.\n        away_only (bool): Logical indicator to only include results from away games.\n        home_adjusted (bool): Logical indicator to adjust certain values based on the share of home games a team has played during the specified duration.\n        even_game_state (bool): Logical indicator to only include shots taken when the score was level.\n        stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    team_xgoals = self._get_stats(leagues, type=\"xgoals\", entity=\"teams\", **kwargs)\n    return team_xgoals\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_team_xpass","title":"<code>get_team_xpass(leagues=LEAGUES, **kwargs)</code>","text":"<p>Retrieves a DataFrame containing team xPass data meeting the specified conditions.</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str]]</code> <p>Leagues on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.</p> <code>LEAGUES</code> <p>Other Parameters:</p> Name Type Description <code>team_ids</code> <code>Union[str, List[str]]</code> <p>Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.</p> <code>team_names</code> <code>Union[str, List[str]]</code> <p>Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.</p> <code>season_name</code> <code>Union[str, List[str]]</code> <p>Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.</p> <code>start_date</code> <code>str</code> <p>Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>end_date</code> <code>str</code> <p>End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.</p> <code>pass_origin_third</code> <code>Union[str, List[str]]</code> <p>Describes the third of the field from which the pass originated. Valid keywords include: 'Attacking', 'Middle', and 'Defensive'. Accepts a string or list of strings.</p> <code>split_by_seasons</code> <code>bool</code> <p>Logical indicator to group results by season.</p> <code>split_by_games</code> <code>bool</code> <p>Logical indicator to group results by game.</p> <code>home_only</code> <code>bool</code> <p>Logical indicator to only include results from home games.</p> <code>away_only</code> <code>bool</code> <p>Logical indicator to only include results from away games.</p> <code>stage_name</code> <code>Union[str, List[str]]</code> <p>Describes the stage of competition in which a game took place. Accepts a string or list of strings.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_team_xpass(\n    self, leagues: Union[str, List[str]] = LEAGUES, **kwargs\n) -&gt; DataFrame:\n    \"\"\"Retrieves a DataFrame containing team xPass data meeting the specified conditions.\n\n    Args:\n        leagues (Union[str, List[str]], optional): Leagues on which to filter. Accepts a string or list of strings. Defaults to LEAGUES.\n\n    Keyword Args:\n        team_ids (Union[str, List[str]]): Team IDs on which to filter. Cannot be combined with team_names. Accepts a string or list of strings.\n        team_names (Union[str, List[str]]): Team names on which to filter. Partial matches and abbreviations are accepted. Cannot be combined with team_ids. Accepts a string or list of strings.\n        season_name (Union[str, List[str]]): Name(s)/year(s) of seasons. Cannot be combined with a date range. Accepts a string or list of strings.\n        start_date (str): Start of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        end_date (str): End of a date range. Must be a string in YYYY-MM-DD format. Cannot be combined with season_name.\n        pass_origin_third (Union[str, List[str]]): Describes the third of the field from which the pass originated. Valid keywords include: 'Attacking', 'Middle', and 'Defensive'. Accepts a string or list of strings.\n        split_by_seasons (bool): Logical indicator to group results by season.\n        split_by_games (bool): Logical indicator to group results by game.\n        home_only (bool): Logical indicator to only include results from home games.\n        away_only (bool): Logical indicator to only include results from away games.\n        stage_name (Union[str, List[str]]): Describes the stage of competition in which a game took place. Accepts a string or list of strings.\n\n    Returns:\n        DataFrame\n    \"\"\"\n    team_xpass = self._get_stats(leagues, type=\"xpass\", entity=\"teams\", **kwargs)\n    return team_xpass\n</code></pre>"},{"location":"reference/#itscalledsoccer.client.AmericanSoccerAnalysis.get_teams","title":"<code>get_teams(leagues=None, ids=None, names=None)</code>","text":"<p>Get information associated with teams</p> <p>Parameters:</p> Name Type Description Default <code>leagues</code> <code>Union[str, List[str], None]</code> <p>league abbreviation or a list of league abbreviations. Defaults to None.</p> <code>None</code> <code>ids</code> <code>Union[str, List[str], None]</code> <p>a single team id or a list of team ids. Defaults to None.</p> <code>None</code> <code>names</code> <code>Union[str, List[str], None]</code> <p>a single team name or a list of team names. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame_</p> Source code in <code>itscalledsoccer/client.py</code> <pre><code>def get_teams(\n    self,\n    leagues: Union[str, List[str], None] = None,\n    ids: Union[str, List[str], None] = None,\n    names: Union[str, List[str], None] = None,\n) -&gt; DataFrame:\n    \"\"\"Get information associated with teams\n\n    Args:\n        leagues (Union[str, List[str], None], optional): league abbreviation or a list of league abbreviations. Defaults to None.\n        ids (Union[str, List[str], None], optional): a single team id or a list of team ids. Defaults to None.\n        names (Union[str, List[str], None], optional): a single team name or a list of team names. Defaults to None.\n\n    Returns:\n        DataFrame_\n    \"\"\"\n    if self.teams is None:\n        self.teams = self._get_entity(\"team\")\n    teams = self._filter_entity(self.teams, \"team\", leagues, ids, names)\n    return teams\n</code></pre>"}]}